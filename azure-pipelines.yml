trigger:
  branches:
    include:
      - main

variables:
  imageName: myapp
  containerRegistry: <ACR_NAME>.azurecr.io   # e.g. myacr123.azurecr.io
  resourceGroup: <RG>
  aksCluster: <AKS>
  kubernetesNamespace: default

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: BuildPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Checkout@1

    - task: Docker@2
      displayName: Build and push image to ACR
      inputs:
        containerRegistry: '<ACR_SERVICE_CONNECTION>'   # Create service connection to ACR in DevOps and put name here
        repository: '$(containerRegistry)/$(imageName)'
        command: buildAndPush
        Dockerfile: 'Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'k8s'
        artifact: 'k8s-manifests'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  jobs:
  - deployment: DeployToAKS
    environment: 'aks/$(aksCluster)'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: k8s-manifests

          - task: AzureCLI@2
            displayName: 'Azure login and get AKS credentials'
            inputs:
              azureSubscription: '<AZURE_SERVICE_CONNECTION>'   # Service connection (SP) with access to RG
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az aks get-credentials -g $(resourceGroup) -n $(aksCluster) --overwrite-existing
                kubectl version --client
                kubectl get nodes

          - bash: |
              echo "Updating k8s manifests with image..."
              IMAGE="$(containerRegistry)/$(imageName):$(Build.BuildId)"
              echo "IMAGE => $IMAGE"
              sed -i "s|REPLACE_IMAGE|$IMAGE|g" k8s/deployment.yaml
              kubectl apply -f k8s/configmap.yaml
              kubectl apply -f k8s/secret.yaml
              kubectl apply -f k8s/deployment.yaml
              kubectl apply -f k8s/service.yaml
              kubectl apply -f k8s/ingress.yaml || true
            displayName: 'kubectl apply manifests'
